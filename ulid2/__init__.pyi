from datetime import datetime
from typing import Optional, Union
from uuid import UUID

AnyULID = Union[UUID, str, bytes, bytearray]
AnyTime = Union[int, float, datetime]

class InvalidULID(ValueError): ...

def encode_ulid_base32(binary: bytes) -> str: ...
def decode_ulid_base32(encoded: str) -> bytes: ...
def get_ulid_timestamp(ulid: AnyULID) -> float: ...
def get_ulid_time(ulid: AnyULID) -> datetime: ...
def generate_binary_ulid(timestamp: Optional[AnyTime] = ..., monotonic: bool = ...) -> bytes: ...
def generate_ulid_as_uuid(timestamp: Optional[AnyTime] = ..., monotonic: bool = ...) -> UUID: ...
def generate_ulid_as_base32(timestamp: Optional[AnyTime] = ..., monotonic: bool = ...) -> str: ...
def ulid_to_base32(ulid: AnyULID) -> str: ...
def ulid_to_uuid(ulid: AnyULID) -> UUID: ...
def ulid_to_binary(ulid: AnyULID) -> bytes: ...
